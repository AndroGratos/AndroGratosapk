import{initializeApp}from "https://www.gstatic.com/firebasejs/10.13.1/firebase-app.js";import{getAuth,onAuthStateChanged,signInWithEmailAndPassword,createUserWithEmailAndPassword,signOut,sendPasswordResetEmail,sendEmailVerification}from "https://www.gstatic.com/firebasejs/10.13.1/firebase-auth.js";import{getFirestore,doc,setDoc,getDoc,collection,query,where,getDocs}from "https://www.gstatic.com/firebasejs/10.13.1/firebase-firestore.js";// Configuration Firebase
const firebaseConfig ={apiKey:"AIzaSyD2MzAcFOGELXdRwdK-C1Mczm2quyV-HZs",authDomain:"generateurtoken-e282f.firebaseapp.com",projectId:"generateurtoken-e282f",storageBucket:"generateurtoken-e282f.appspot.com",messagingSenderId:"485438236563",appId:"1:485438236563:web:a587b79c5d4bb26edeea66"};// Initialisation Firebase
const app = initializeApp(firebaseConfig);const auth = getAuth(app);const db = getFirestore(app);// Fonction de cr√©ation de compte
document.getElementById('signupButton')?.addEventListener('click',async (e) =>{e.preventDefault();const identifier = document.getElementById('signupIdentifier').value;const email = document.getElementById('signupEmail').value;const password = document.getElementById('signupPassword').value;try{const userCredential = await createUserWithEmailAndPassword(auth,email,password);const user = userCredential.user;// Envoi de l'e-mail de v√©rification
        await sendEmailVerification(user);alert("Un e-mail de v√©rification a √©t√© envoy√©. Veuillez v√©rifier votre bo√Æte de r√©ception.");// Sauvegarde des infos utilisateur dans Firestore
        await setDoc(doc(db,"users",user.uid),{identifier:identifier,email:email,role:"user",clickLeft:5,resetTime:null});// Redirection vers la page de connexion apr√®s l'inscription
        window.location.href = 'login.html';}catch (error){console.error('Erreur de cr√©ation de compte:',error.message);alert('Cr√©ation de compte √©chou√©e:' + error.message);}});// Fonction de connexion
document.getElementById('loginButton')?.addEventListener('click',async (e) =>{e.preventDefault();const identifier = document.getElementById('identifier').value;const password = document.getElementById('password').value;try{const usersCollection = collection(db,'users');const userQuery = query(usersCollection,where('identifier','==',identifier));const userSnapshot = await getDocs(userQuery);if (userSnapshot.empty){throw new Error('Identifiant incorrect.');}const userDoc = userSnapshot.docs[0].data();const email = userDoc.email;const userCredential = await signInWithEmailAndPassword(auth,email,password);const user = userCredential.user;// V√©rifie si l'email est v√©rifi√©
        if (user.emailVerified){window.location.href = 'index.html';}else{alert("Veuillez v√©rifier votre adresse e-mail pour vous connecter.");window.location.href = 'login.html';}}catch (error){console.error('Erreur de connexion:',error.message);alert('Connexion √©chou√©e:' + error.message);}});// Fonction de d√©connexion
document.getElementById('logoutButton')?.addEventListener('click',() =>{signOut(auth)
        .then(() =>{window.location.href = 'login.html';})
        .catch((error) =>{console.error('Erreur de d√©connexion:',error.message);});});// Fonction de r√©initialisation du mot de passe
document.getElementById('resetButton')?.addEventListener('click',async (e) =>{e.preventDefault();const email = document.getElementById('resetEmail').value;try{await sendPasswordResetEmail(auth,email);alert('Email de r√©initialisation envoy√© !');}catch (error){console.error('Erreur d\'envoi de l\'email de r√©initialisation:',error.message);alert('Erreur d\'envoi de l\'email de r√©initialisation:' + error.message);}});// Gestion de l'affichage/cachage du mot de passe
document.getElementById('togglePassword')?.addEventListener('click',() =>{const passwordField = document.getElementById('password');const togglePassword = document.getElementById('togglePassword');if (passwordField.type === 'password'){passwordField.type = 'text';togglePassword.textContent = 'üêµ';// Mot de passe visible}else{passwordField.type = 'password';togglePassword.textContent = 'üôà';// Mot de passe cach√©}});document.getElementById('toggleSignupPassword')?.addEventListener('click',() =>{const signupPasswordField = document.getElementById('signupPassword');const toggleSignupPassword = document.getElementById('toggleSignupPassword');if (signupPasswordField.type === 'password'){signupPasswordField.type = 'text';toggleSignupPassword.textContent = 'üêµ';// Mot de passe visible}else{signupPasswordField.type = 'password';toggleSignupPassword.textContent = 'üôà';// Mot de passe cach√©}});// V√©rification de l'√©tat de connexion pour g√©rer les redirections
onAuthStateChanged(auth,async (user) =>{if (user){const userDoc = doc(db,"users",user.uid);const userSnap = await getDoc(userDoc);if (userSnap.exists()){const isEmailVerified = user.emailVerified;// Contr√¥le d'acc√®s pour index.html
            if (window.location.pathname === '/index.html'){if (!isEmailVerified){// Redirection vers la page de connexion si l'email n'est pas v√©rifi√©
                    window.location.href = 'login.html';}}else if (window.location.pathname === '/login.html' || window.location.pathname === '/signup.html' || window.location.pathname === '/password-reset.html'){// Redirection vers index.html pour les pages d'inscription et de connexion si l'utilisateur est d√©j√† connect√©
                if (isEmailVerified){window.location.href = 'index.html';}}}}else{// Redirection vers la page de connexion si l'utilisateur est non authentifi√©
        if (window.location.pathname === '/index.html'){window.location.href = 'login.html';}}});
